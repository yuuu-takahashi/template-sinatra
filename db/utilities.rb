# frozen_string_literal: true

def write_schema_header(file)
  file.puts '# frozen_string_literal: true'
  file.puts ''
  file.puts '# This file is auto-generated by Sequel'
  file.puts '# To regenerate it, run the schema generation script'
  file.puts "\nSequel::Schema.define do\n"
end

def write_tables_schema(client, file)
  client.tables.each do |table|
    columns = client.schema(table)
    write_table_definition(file, table, columns)
  end
end

def write_table_definition(file, table, columns)
  file.puts "  create_table :#{table} do"
  columns.each do |column, attributes|
    write_column_definition(file, column, attributes)
  end
  file.puts '  end'
end

def write_column_definition(file, column, attributes)
  type = attributes[:type]
  options = []
  options << "null: #{attributes[:allow_null]}" unless attributes[:allow_null].nil?
  options << "default: '#{attributes[:default]}'" unless attributes[:default].nil?
  file.puts "    column :#{column}, :#{type}#{options.any? ? ", #{options.join(', ')}" : ''}"
end

def generate_migrate_file(migration_name)
  validate_migration_name(migration_name)
  file_path = generate_file_path(migration_name)
  template = migration_template

  write_migration_file(file_path, template)
  puts "マイグレーションファイルが生成されました: #{file_path}"
end

def validate_migration_name(migration_name)
  return unless migration_name.nil? || migration_name.strip.empty?

  puts 'エラー: マイグレーション名を指定してください。例: rake db:generate_migrate[create_users]'
  exit 1
end

def generate_file_path(migration_name)
  timestamp = Time.now.strftime('%Y%m%d%H%M%S')
  file_name = "#{timestamp}_#{migration_name}.rb"
  File.join('db', 'migrate', file_name)
end

def migration_template
  <<~RUBY
    # frozen_string_literal: true

    Sequel.migration do
      change do
        # 例:
        # create_table(:users) do
        #   primary_key :id
        #   String :name, null: false
        #   String :email, null: false, unique: true
        #   DateTime :created_at
        #   DateTime :updated_at
        # end
      end
    end
  RUBY
end

def write_migration_file(file_path, template)
  FileUtils.mkdir_p(File.dirname(file_path))
  File.write(file_path, template)
end
